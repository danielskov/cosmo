function [sample_id, name, email, ...
    lat, long, ...
    be_conc, al_conc, c_conc, ne_conc, ...
    be_uncer, al_uncer, c_uncer, ne_uncer, ...
    zobs, ...
    be_prod_spall, al_prod_spall, c_prod_spall, ne_prod_spall, ...
    be_prod_muon, al_prod_muon, c_prod_muon, ne_prod_muon, ...
    rock_density, ...
    epsilon_gla_min, epsilon_gla_max, ...
    epsilon_int_min, epsilon_int_max, ...
    t_degla_min, t_degla_max, ...
    record, record_threshold_min, record_threshold_max, ...
    nwalkers] = ...
    import_php_file(filename, startRow, endRow)

%% import_php_file.m
% Automatically generated using the `uiimport` tool in Matlab.
% If the output format in "uploadhistory.php" is changed, update this file
% accordingly.
% All columns are initially read as strings. Some of the columns (specified
% by the col vector) are converted to numbers.

%IMPORTFILE Import numeric data from a text file as column vectors.
%   [SAMPLEID,NAME,EMAIL,LAT,LONG,BE_CONC,AL_CONC,C_CONC,NE_CONC,BE_UNCER,AL_UNCER,C_UNCER,NE_UNCER,ZOBS,BE_PROD,AL_PROD,C_PROD,NE_PROD,ROCK_DENSITY,EPSILON_GLA_MIN,EPSILON_GLA_MAX,EPSILON_INT_MIN,EPSILON_INT_MAX,T_DEGLA,T_DEGLA_UNCER,RECORD,RECORD_THRESHOLD_MIN,RECORD_THRESHOLD_MAX]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [SAMPLEID,NAME,EMAIL,LAT,LONG,BE_CONC,AL_CONC,C_CONC,NE_CONC,BE_UNCER,AL_UNCER,C_UNCER,NE_UNCER,ZOBS,BE_PROD,AL_PROD,C_PROD,NE_PROD,ROCK_DENSITY,EPSILON_GLA_MIN,EPSILON_GLA_MAX,EPSILON_INT_MIN,EPSILON_INT_MAX,T_DEGLA,T_DEGLA_UNCER,RECORD,RECORD_THRESHOLD_MIN,RECORD_THRESHOLD_MAX]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [sampleid,name,email,lat,long,be_conc,al_conc,c_conc,ne_conc,be_uncer,al_uncer,c_uncer,ne_uncer,be_zobs,al_zobs,c_zobs,ne_zobs,be_prod,al_prod,c_prod,ne_prod,rock_density,epsilon_gla_min,epsilon_gla_max,epsilon_int_min,epsilon_int_max,t_degla,t_degla_uncer,record,record_threshold_min,record_threshold_max]
%   = importfile('cosmo_pgpzvt',1, 1);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/08/24 12:47:00

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
%formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% the columns in col are numeric]
for col=[6:29, 31:33]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.

% rows with numbers, check that range matches values in for loop l. 68 and
% the list below
rawNumericColumns = raw(:, [6:29, 31:33]);

% rows with strings
rawCellColumns = raw(:, [1:5, 30]);


%% Allocate imported array to column variable names
% use rawCellColumns(:, i) for text fields and 
% cell2mat(rawNumericColumns(:, i)) for numeric fields
sample_id            = rawCellColumns(:, 1);               % 1
name                 = rawCellColumns(:, 2);               % 2
email                = rawCellColumns(:, 3);               % 3
lat                  = rawCellColumns(:, 4);               % 4
long                 = rawCellColumns(:, 5);               % 5
be_conc     	     = cell2mat(rawNumericColumns(:, 1));  % 6
al_conc              = cell2mat(rawNumericColumns(:, 2));  % 7
c_conc               = cell2mat(rawNumericColumns(:, 3));  % 8
ne_conc              = cell2mat(rawNumericColumns(:, 4));  % 9
be_uncer             = cell2mat(rawNumericColumns(:, 5));  % 10
al_uncer             = cell2mat(rawNumericColumns(:, 6));  % 11
c_uncer              = cell2mat(rawNumericColumns(:, 7));  % 12
ne_uncer             = cell2mat(rawNumericColumns(:, 8));  % 13
zobs                 = cell2mat(rawNumericColumns(:, 9));  % 14
be_prod_spall        = cell2mat(rawNumericColumns(:, 13)); % 15
al_prod_spall        = cell2mat(rawNumericColumns(:, 14)); % 16
c_prod_spall         = cell2mat(rawNumericColumns(:, 15)); % 17
ne_prod_spall        = cell2mat(rawNumericColumns(:, 16)); % 18
be_prod_muon         = cell2mat(rawNumericColumns(:, 17)); % 19
al_prod_muon         = cell2mat(rawNumericColumns(:, 18)); % 20
c_prod_muon          = cell2mat(rawNumericColumns(:, 19)); % 21
ne_prod_muon         = cell2mat(rawNumericColumns(:, 20)); % 22
rock_density         = cell2mat(rawNumericColumns(:, 21)); % 23
epsilon_gla_min      = cell2mat(rawNumericColumns(:, 22)); % 24
epsilon_gla_max      = cell2mat(rawNumericColumns(:, 23)); % 25
epsilon_int_min      = cell2mat(rawNumericColumns(:, 24)); % 26
epsilon_int_max      = cell2mat(rawNumericColumns(:, 25)); % 27
t_degla_min          = cell2mat(rawNumericColumns(:, 26)); % 28
t_degla_max          = cell2mat(rawNumericColumns(:, 27)); % 29
record               = rawCellColumns(:, 6);               % 30
record_threshold_min = cell2mat(rawNumericColumns(:, 28)); % 31
record_threshold_max = cell2mat(rawNumericColumns(:, 29)); % 32
nwalkers             = cell2mat(rawNumericColumns(:, 30)); % 33


%% Change units
be_conc = be_conc*1000.; % atoms/g to atoms/kg
al_conc = al_conc*1000.; % atoms/g to atoms/kg
c_conc  =  c_conc*1000.; % atoms/g to atoms/kg
ne_conc = ne_conc*1000.; % atoms/g to atoms/kg

be_prod_spall = be_prod_spall*1000.; % atoms/g/yr to atoms/kg/yr
al_prod_spall = al_prod_spall*1000.; % atoms/g/yr to atoms/kg/yr
c_prod_spall  =  c_prod_spall*1000.; % atoms/g/yr to atoms/kg/yr
ne_prod_spall = ne_prod_spall*1000.; % atoms/g/yr to atoms/kg/yr

be_prod_muon = be_prod_muon*1000.; % atoms/g/yr to atoms/kg/yr
al_prod_muon = al_prod_muon*1000.; % atoms/g/yr to atoms/kg/yr
c_prod_muon  =  c_prod_muon*1000.; % atoms/g/yr to atoms/kg/yr
ne_prod_muon = ne_prod_muon*1000.; % atoms/g/yr to atoms/kg/yr

epsilon_gla_min = epsilon_gla_min/1000.; % m/Myr to mm/yr
epsilon_gla_max = epsilon_gla_max/1000.; % m/Myr to mm/yr
epsilon_int_min = epsilon_int_min/1000.; % m/Myr to mm/yr
epsilon_int_max = epsilon_int_max/1000.; % m/Myr to mm/yr